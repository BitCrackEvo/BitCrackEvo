name: C/C++ CD

on:
  push:
    tags:
      - '*'

jobs:
  build_release:
    name: build_release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: build
        run: make build
      - name: version
        run: echo "::set-output name=version::$(./bin/azblogfilter --version)"
        id: version
      - name: build artifacts
        run: make build-linux && make build-windows && make build-darwin
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/azblogfilter.linux-amd64.tar.gz
          asset_name: azblogfilter.linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: upload darwin artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/azblogfilter.darwin-amd64.tar.gz
          asset_name: azblogfilter.darwin-amd64.tar.gz
          asset_content_type: application/gzip
      - name: upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/azblogfilter.windows-amd64.zip
          asset_name: azblogfilter.windows-amd64.zip
          asset_content_type: application/zip
          
    jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        cuda_ver: ['11.2.1', '11.2.2']
    if: "!contains(github.event.head_commit.message, '[ci skip]')"  # respect [ci skip] commit
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Set up CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.1
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_ver }}
          method: network
          subPackages: '["nvcc"]'
      - name: setup msvc and build wheels
        if: ${{ matrix.os == 'windows-latest' }}
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ./build.bat
          cl --version
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
          pip install numpy cython wheel
          python setup.py develop
          python setup.py sdist bdist_wheel
      - name: just build wheels
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
          pip install numpy cython wheel
          python setup.py develop
          python setup.py sdist bdist_wheel
